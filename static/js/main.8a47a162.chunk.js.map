{"version":3,"sources":["images/face-waiting.png","images/face-talking.png","Components/VideoFeed.js","Components/Title.js","Components/CurrentEmotion.js","Components/RoboFace.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VideoFeed","componentDidMount","a","loadNewModel","setInputDevice","MODEL_URL","process","faceapi","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceRecognitionNet","faceExpressionNet","navigator","mediaDevices","enumerateDevices","then","devices","filter","device","kind","length","setState","facingMode","startVideoFeed","interval","setInterval","videoFeed","componentWillUnmount","clearInterval","video","document","getElementById","withFaceLandmarks","withFaceExpressions","detections","console","log","state","emotion","Object","keys","expressions","find","key","props","getCurrentEmotion","detectFace","webcam","React","createRef","classes","this","videoConstraints","width","height","Paper","elevation","className","root","style","display","id","audio","ref","screenshotFormat","borderRadius","Component","withStyles","theme","flexGrow","margin","marginTop","marginBottom","useStyles","makeStyles","menuButton","marginRight","spacing","title","fontSize","subtitle","fontStyle","Title","AppBar","position","color","borderTopRightRadius","borderTopLeftRadius","Toolbar","Typography","variant","align","CurrentEmotion","padding","toUpperCase","RoboFace","isFace","Grid","container","justify","item","xs","textAlign","src","robotTalkingImg","robotWaitingImg","getRoboFace","getGreeting","App","showLandmarks","e","preventDefault","Container","maxWidth","getCurrentAge","getCurrentGender","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a47a162.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face-waiting.a30a2d17.png\";","module.exports = __webpack_public_path__ + \"static/media/face-talking.e88949cc.png\";","import React from 'react';\nimport Webcam from 'react-webcam';\nimport { Paper, withStyles } from '@material-ui/core';\nimport * as faceapi from 'face-api.js';\n\nconst Styles = (theme => ({\n    root: {\n      flexGrow: 1,\n      margin: '0 auto',\n      width: '90%',\n      height: '90%',\n      marginTop: '1rem',\n      marginBottom: '1rem',\n      borderRadius: '20px'\n\n    }\n  }));\n\nconst WIDTH = 300;\nconst HEIGHT = 300;\n\nclass VideoFeed extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            facingMode: null,\n            detections: null,\n\n        }\n        this.webcam = React.createRef();\n    }\n\n    componentDidMount = async () => {\n        await this.loadNewModel();\n        this.setInputDevice();\n    }\n\n    loadNewModel = async () => {\n        const MODEL_URL = process.env.PUBLIC_URL + '/models';\n        await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);\n        await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);\n        await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);\n        await faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL);\n    }\n\n    setInputDevice = () => {\n        navigator.mediaDevices.enumerateDevices().then(async devices => {\n            const inputDevice = await devices.filter(\n                device => device.kind === 'videoinput'\n            )\n            if(inputDevice.length < 2){\n               await this.setState({\n                   facingMode: 'user'\n               })\n            } else {\n                await this.setState({\n                    facingMode: 'user'\n                })\n            }\n            this.startVideoFeed();\n        });\n    }\n\n    startVideoFeed = () => {\n        this.interval = setInterval(() => {\n            this.videoFeed()\n        }, 250)\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.interval)\n    }\n\n    videoFeed = async () => {\n        const video = document.getElementById('video')\n\n        const detections = await faceapi.detectAllFaces(video, \n                new faceapi.TinyFaceDetectorOptions())\n                .withFaceLandmarks()\n                .withFaceExpressions()\n        \n                await this.setState({\n                    detections\n                })\n           \n\n            console.log(detections)\n\n            if(this.state.detections.length > 0){\n                const emotion = Object.keys(detections[0].expressions).find(key => detections[0].expressions[key] > 0.5 )\n                this.props.getCurrentEmotion(emotion);\n                this.props.detectFace(true)\n            } else {\n                this.props.detectFace(false)\n            }\n    }\n\n    render(){\n        const { classes }  = this.props;\n        const {facingMode } = this.state;\n        let videoConstraints = null;\n        // let camera = '';\n\n        if(facingMode) {\n            videoConstraints = {\n                width: WIDTH,\n                height: HEIGHT,\n                facingMode\n            };\n\n            // if(facingMode === 'user') {\n            //     camera = 'Front';\n            // } else {\n            //     camera = 'Back';\n            // }\n        }\n\n        return(\n            <Paper elevation={0} className={classes.root}>\n                <div style={{\n                        width: '100%',\n                        height: '100%',\n                        // display: 'flex',\n                        // justifyContent : 'center',\n                        // alignItems: 'center',\n                        display: 'none'\n                        }}>\n                    <Webcam \n                        id='video'\n                        audio={false}\n                        width={WIDTH}\n                        height={HEIGHT}\n                        ref = {this.webcam}\n                        screenshotFormat='image/jpeg'\n                        videoConstraints = {videoConstraints} \n                        style={{borderRadius:'20px',}}\n                    />\n                </div>\n            </Paper>\n        )\n    }\n}\n\nexport default withStyles(Styles)(VideoFeed);\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      fontSize:' 1.25rem',\n    },\n    subtitle: {\n        marginTop: '1rem',\n        marginBottom: '1rem',\n        fontStyle: 'italic',\n        fontSize:'.6rem'\n    }\n  }));\n\nconst Title = () => {\n\n    const classes = useStyles();\n\n    return(\n        <div>\n            <AppBar position=\"static\" color='primary' style={{borderTopRightRadius: '20px',borderTopLeftRadius: '20px' }}>\n                <Toolbar>\n                    <Typography variant=\"h5\" className={classes.title}>\n                        RoboAssist\n                    </Typography>\n                    {/* <Button color=\"inherit\">Name</Button> */}\n                </Toolbar>\n            </AppBar>\n            <Typography className={classes.subtitle} align='center' display='block' variant='button' >An App That Detects Facial Emotions In Real-Time</Typography>\n        </div>\n    )\n}\n\nexport default Title;","import React from 'react';\nimport { Paper, Typography } from '@material-ui/core';\n\nconst CurrentEmotion = ({emotion}) => {\n    return(\n        <div style={{margin: '0 auto', marginTop: '1rem', width:'80%'}}>\n            <Paper elevation={3} style={{padding: '1rem'}}>\n                <Typography style={{marginBottom: '.5rem'}} align='center' variant='body2'>CURRENT EXPRESSION:</Typography>\n                <Typography align='center' variant='subtitle2'>\n                    {emotion? emotion.toUpperCase() : 'LOADING...'}\n                </Typography>\n            </Paper>\n        </div>\n    )\n}\n\nexport default CurrentEmotion;","import React from 'react';\nimport { Grid, Paper } from '@material-ui/core';\nimport robotWaitingImg from '../images/face-waiting.png'\nimport robotTalkingImg from '../images/face-talking.png'\n\nclass RoboFace extends React.Component {\n\n    render(){\n\n        const {emotion, isFace} = this.props;\n\n        \n\n\n        const getGreeting = emotion => {\n            switch(emotion){\n                case 'neutral':\n                    return 'I would like to welcome you to the building, is there anything I can do to assist you.?'\n                case 'happy':\n                    return 'I can see you are having a good day, how can I be of assistance to you?'\n                case 'sad':\n                    return 'I can see you may need help, is there anything I can do to make you feel better.?'\n                case 'surprised':\n                    return 'it looks like you are happy to be here, is there anything I can do to assist you.?'\n                case 'angry':\n                    return 'it seems you are having difficulty, is there anything I can do to assist you.?'\n                default:\n                    return ''\n            }\n        }\n\n        const getRoboFace = isFace => {\n           return isFace? robotTalkingImg : robotWaitingImg\n        }\n        \n\n        return (\n            <Grid container justify='center'>\n                <Grid item xs={8} style={{textAlign:'center'}}>\n                    <Paper style={{padding: '1rem', height: '50vh'}}>\n                        <div id='roboImage'><img src={getRoboFace(isFace)}/></div>\n                        {emotion? \n                            <p>Hi, I'm Robo Assist, {getGreeting(emotion)}</p>\n                            : <p>Loading Robo Face</p>\n                        }\n                    </Paper>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default RoboFace;\n","import React from 'react';\nimport './App.css';\nimport { Container, Paper, Grid } from '@material-ui/core';\nimport VideoFeed from './Components/VideoFeed';\nimport Title from './Components/Title';\nimport CurrentEmotion from './Components/CurrentEmotion';\nimport RoboFace from './Components/RoboFace';\n\n\nclass App extends React.Component{\n    constructor(){\n        super()\n        this.state =  {\n            emotion: '',\n            isFace: false\n        }\n    }\n\n    getCurrentEmotion = (emotion) => {\n        this.setState({emotion})\n    }\n\n\n    showLandmarks = (e) => {\n        e.preventDefault()\n        this.setState({\n            showLandmarks: !this.state.showLandmarks\n        })\n    }\n\n    detectFace = isFace => {\n        if(isFace) { \n            this.setState({\n                isFace: true\n            })\n        } else {\n            this.setState({\n            isFace: false\n            })\n        }\n    }\n\n    render(){\n        return(\n            \n            <Container maxWidth='sm' style={{marginTop: '2rem', marginBottom: '2rem'}}>\n                <Paper elevation={3} style={{borderRadius: '20px'}}>\n                    <Title/>\n                    <hr style={{width: '60%'}}/>\n                    <RoboFace isFace={this.state.isFace} emotion={this.state.emotion}/>\n                    <VideoFeed \n                        detectFace = {this.detectFace}\n                        getCurrentEmotion={this.getCurrentEmotion}\n                        getCurrentAge={this.getCurrentAge}\n                        getCurrentGender={this.getCurrentGender}\n                        showLandmarks={this.state.showLandmarks}\n                    />\n                    <hr style={{width: '60%'}}/>\n                    <Grid container spacing={3} justify='center'>\n                        <Grid item xs={12}>\n                            <CurrentEmotion emotion={this.state.emotion}/>\n                        </Grid>\n                    </Grid>\n                    \n                </Paper>\n            </Container>\n\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}